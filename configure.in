dnl =======================================================
dnl FILE: ./admin/configure.in.min
dnl =======================================================

dnl    This file is part of the KDE libraries/packages
dnl    Copyright (C) 2001 Stephan Kulow (coolo@kde.org)
 
dnl    This file is free software; you can redistribute it and/or
dnl    modify it under the terms of the GNU Library General Public
dnl    License as published by the Free Software Foundation; either
dnl    version 2 of the License, or (at your option) any later version.
 
dnl    This library is distributed in the hope that it will be useful,
dnl    but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl    Library General Public License for more details.
 
dnl    You should have received a copy of the GNU Library General Public License
dnl    along with this library; see the file COPYING.LIB.  If not, write to
dnl    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
dnl    Boston, MA 02110-1301, USA.

# Original Author was Kalle@kde.org
# I lifted it in some mater. (Stephan Kulow)
# I used much code from Janos Farkas

dnl Process this file with autoconf to produce a configure script.

AC_INIT(acinclude.m4) dnl a source file from your sub dir

dnl This is so we can use kde-common
AC_CONFIG_AUX_DIR(admin)

dnl This ksh/zsh feature conflicts with `cd blah ; pwd`
unset CDPATH

dnl Checking host/target/build systems, for make, install etc.
AC_CANONICAL_SYSTEM 
dnl Perform program name transformation
AC_ARG_PROGRAM

dnl Automake doc recommends to do this only here. (Janos)
AM_INIT_AUTOMAKE(krusader, 1.90.0) dnl searches for some needed programs

KDE_SET_PREFIX

dnl generate the config header
AM_CONFIG_HEADER(config.h) dnl at the distribution this done

dnl Checks for programs.
AC_CHECK_COMPILERS
AC_ENABLE_SHARED(yes)
AC_ENABLE_STATIC(no)
KDE_PROG_LIBTOOL

dnl for NLS support. Call them in this order!
dnl WITH_NLS is for the po files
AM_KDE_WITH_NLS

KDE_USE_QT(3)
AC_PATH_KDE
dnl =======================================================
dnl FILE: configure.in.in
dnl =======================================================

#MIN_CONFIG(3)

###################################################
#		Check for Konqueror
###################################################

AC_ARG_WITH(konqueror,
    AC_HELP_STRING([--without-konqueror],[build Krusader without support Konqueror's servicemenus [default=with]]),
    [with_konq=$withval],
    [with_konq=yes]
)

if test "$with_konq" != "no"; then
	# check for the headers
	have_libkonq=yes
	KDE_CHECK_HEADER(konq_popupmenu.h, ,[have_libkonq=no] )
	KDE_CHECK_HEADER(konqbookmarkmanager.h, ,[have_libkonq=no] )

	if test "$have_libkonq" = "no"; then
		# if this var is 'yes', the configure-suppery drops a warning.
		# see admin/configure.in.bot.end
		warn_konq=yes
	fi
fi

AM_CONDITIONAL(include_libkonq, test "$have_libkonq" = yes)

###################################################
#		Check for ACL
###################################################

AC_ARG_WITH(acl,
    AC_HELP_STRING([--without-acl],[build Krusader without ACL support [default=with]]),
    [with_acl=$withval],
    [with_acl=yes]
)

if test "$with_acl" != "no"; then
	# check for the headers
	have_posix_acl=yes
	AC_CHECK_HEADER(sys/acl.h, ,[have_posix_acl=no] )
	have_non_posix_acl_ext=yes
	AC_CHECK_HEADER(acl/libacl.h, ,[have_non_posix_acl_ext=no] )
	
	if test "$have_posix_acl" = "yes" ; then
		AC_DEFINE([HAVE_POSIX_ACL], 1, [Define if system has POSIX ACL support.])
		if test "$have_non_posix_acl_ext" = "yes" ; then
			AC_DEFINE([HAVE_NON_POSIX_ACL_EXTENSIONS], 1, [Define if system has non-POSIX extensions to the ACL support.])
		fi
	fi
	
	if test "$have_posix_acl" = "yes" ; then
		AC_CHECK_LIB(acl, acl_free)
	fi
fi

###################################################
#		Check for JavaScript
###################################################

AC_ARG_WITH(javascript,
    AC_HELP_STRING([--without-javascript],[build Krusader without JavaScript support [default=with]]),
    [with_js=$withval],
    [with_js=yes]
)

if test "$with_js" != "no"; then
	# check for the header
	have_libkjsembed=yes
	KDE_CHECK_HEADER(kjsembed/kjsembedpart.h, ,[have_libkjsembed=no] )

	if test "$have_libkjsembed" = "no"; then
		# if this var is 'yes', the configure-suppery drops a warning.
		# see admin/configure.in.bot.end
		warn_js=yes
	fi
fi

AM_CONDITIONAL(include_libkjsembed, test "$have_libkjsembed" = yes)

###################################################
#		If our own tar-KIO schould be build
###################################################

AC_ARG_WITH(kiotar,
    AC_HELP_STRING([--with-kiotar],[use our write-enabled version of KDE's tar KIO-Slave [default=without]]),
    [with_tar=$withval],
    [with_tar=no]
)

AM_CONDITIONAL(with_tar, test "$with_tar" != "no")

###################################################

dnl PACKAGE set before
# This adds the RELEASE_NAME-Marco to config.h (where also VERSION is defined).
# It can be used to add a name to a release. If commented out only VERSION is used, see main.cpp
AH_BOTTOM([#define RELEASE_NAME "Power Stone"])

dnl CXXFLAGS="$NOOPT_CXXFLAGS" dnl __tdevelop[noopt]__
dnl CFLAGS="$NOOPT_CFLAGS" dnl __tdevelop[noopt]__
dnl CXXFLAGS="$CXXFLAGS $USE_EXCEPTIONS" dnl __tdevelop[exc]__

dnl KDE_NEED_FLEX dnl __tdevelop__
dnl AC_PROG_YACC dnl __tdevelop__


CPPFLAGS="$CPPFLAGS -D_LARGEFILE64_SOURCE -DKDE_NO_COMPAT -DQT_NO_ASCII_CAST"
KDE_CREATE_SUBDIRSLIST
AC_CONFIG_FILES([ Makefile ])
AC_CONFIG_FILES([ doc/Makefile ])
AC_CONFIG_FILES([ doc/en/Makefile ])
AC_CONFIG_FILES([ doc/pics/Makefile ])
AC_CONFIG_FILES([ doc/ru/Makefile ])
AC_CONFIG_FILES([ iso/Makefile ])
AC_CONFIG_FILES([ iso/libisofs/Makefile ])
AC_CONFIG_FILES([ krArc/Makefile ])
AC_CONFIG_FILES([ krusader/Makefile ])
AC_CONFIG_FILES([ krusader/ActionMan/Makefile ])
AC_CONFIG_FILES([ krusader/BookMan/Makefile ])
AC_CONFIG_FILES([ krusader/Dialogs/Makefile ])
AC_CONFIG_FILES([ krusader/DiskUsage/Makefile ])
AC_CONFIG_FILES([ krusader/DiskUsage/filelightParts/Makefile ])
AC_CONFIG_FILES([ krusader/DiskUsage/radialMap/Makefile ])
AC_CONFIG_FILES([ krusader/Filter/Makefile ])
AC_CONFIG_FILES([ krusader/GUI/Makefile ])
AC_CONFIG_FILES([ krusader/KViewer/Makefile ])
AC_CONFIG_FILES([ krusader/Konfigurator/Makefile ])
AC_CONFIG_FILES([ krusader/KrJS/Makefile ])
AC_CONFIG_FILES([ krusader/Locate/Makefile ])
AC_CONFIG_FILES([ krusader/MountMan/Makefile ])
AC_CONFIG_FILES([ krusader/Panel/Makefile ])
AC_CONFIG_FILES([ krusader/Queue/Makefile ])
AC_CONFIG_FILES([ krusader/RemoteMan/Makefile ])
AC_CONFIG_FILES([ krusader/Search/Makefile ])
AC_CONFIG_FILES([ krusader/Splitter/Makefile ])
AC_CONFIG_FILES([ krusader/Synchronizer/Makefile ])
AC_CONFIG_FILES([ krusader/UserAction/Makefile ])
AC_CONFIG_FILES([ krusader/UserMenu/Makefile ])
AC_CONFIG_FILES([ krusader/VFS/Makefile ])
AC_CONFIG_FILES([ pics/Makefile ])
AC_CONFIG_FILES([ po/Makefile ])
AC_CONFIG_FILES([ tar/Makefile ])
AC_CONFIG_FILES([ virt/Makefile ])
AC_OUTPUT
# added manualy, it dumps a summary of the most important settings
# and displays a warning if the TDEDIR or QTDIR is empty
echo "
Krusader Project:
-----------------
  Source code location: ${srcdir}
  C Compiler:           ${CC}
  C Compiler flags:     ${CFLAGS}
  C++ Compiler:         ${CXX}
  prefix:               ${prefix}
  kde_includes:         ${ac_kde_includes}
  kde_libraries:        ${ac_kde_libraries}
  kde_locale:           ${prefix}/share/locale
  qt_libraries:         ${ac_qt_libraries}
  qt_includes:          ${ac_qt_includes}
  TDEDIR:               ${TDEDIR}
  QTDIR:                ${QTDIR}
  Install path:         ${prefix}/bin
  krusader version:     ${VERSION}
  krusader binary:      ${prefix}/bin/${PACKAGE}     (after 'make install')
"

# Check if KDE_SET_PREFIX was called, and --prefix was passed to configure
if test -n "$kde_libs_prefix" -a -n "$given_prefix"; then
  # And if so, warn when they don't match
  if test "$kde_libs_prefix" != "$given_prefix"; then
    # And if kde doesn't know about the prefix yet
    echo ":"`tde-config --path exe`":" | grep ":$given_prefix/bin/:" 2>&1 >/dev/null
    if test $? -ne 0; then
      echo ""
      echo "Warning: you chose to install this package in $given_prefix,"
      echo "but KDE was found in $kde_libs_prefix."
      echo "For this to work, you will need to tell KDE about the new prefix, by ensuring"
      echo "that TDEDIRS contains it, e.g. export TDEDIRS=$given_prefix:$kde_libs_prefix"
      echo "Then restart KDE."
      echo ""
    fi
  fi
fi

if test x$GXX = "xyes" -a x$kde_have_gcc_visibility = "xyes" -a x$kde_cv_val_qt_gcc_visibility_patched = "xno"; then
  echo ""
  echo "Your GCC supports symbol visibility, but the patch for Qt supporting visibility"
  echo "was not included. Therefore, GCC symbol visibility support remains disabled."
  echo ""
  echo "For better performance, consider including the Qt visibility supporting patch"
  echo "located at:"
  echo ""
  echo "http://bugs.kde.org/show_bug.cgi?id=109386"
  echo ""
  echo "and recompile all of Qt and KDE. Note, this is entirely optional and"
  echo "everything will continue to work just fine without it."
  echo ""
fi

if test "$all_tests" = "bad"; then
  if test ! "$cache_file" = "/dev/null"; then
    echo ""
    echo "Please remove the file $cache_file after changing your setup"
    echo "so that configure will find the changes next time."
    echo ""
  fi
else

if (test $warn_konq);
   then echo "NOTICE:  Since the Konqueror-headers are not found Krusader will be build without support for its service-menus"
fi

if (test $warn_js);
   then echo "NOTICE:  Since the KJSEmbed-headers are not found Krusader will be build without JS support"
fi

if (test $with_tar != "no");
   then echo "NOTICE:  Our write-enabled version of KDE's tar KIO-Slave will be build. \"make install\" will may overwrite the KDE-version!"
fi

if (test -z "$TDEDIR");
   then echo "WARNING:  TDEDIR enviroment variable is empty! Please read Krusader FAQ"
fi

if (test -z "$QTDIR");
   then echo "WARNING:  QTDIR enviroment variable is empty!  Please read Krusader FAQ"
fi
  echo ""
  echo "Good - your configure finished. Start make now"
  echo ""
fi
